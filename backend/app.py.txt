from flask import Flask, request, jsonify
from flask_cors import CORS
from decouple import config
import requests
from serpapi import GoogleSearch
import json
from datetime import datetime
import openai
from typing import List, Dict
from scholarly import scholarly
import semanticscholar as sch
from crossref.restful import Works

app = Flask(__name__)
CORS(app)

# 配置API密钥和代理
GOOGLE_SCHOLAR_API_KEY = config('GOOGLE_SCHOLAR_API_KEY')
SERPAPI_API_KEY = config('SERPAPI_API_KEY', default='')
PROXY_URL = config('PROXY_URL', default='http://api.wlai.vip')
OPENAI_API_KEY = config('OPENAI_API_KEY')
OPENAI_API_BASE = config('OPENAI_API_BASE')

# 配置OpenAI
openai.api_key = OPENAI_API_KEY
openai.api_base = OPENAI_API_BASE

def search_crossref(query: str, max_results: int = 5) -> List[Dict]:
    """使用Crossref API搜索文献"""
    try:
        works = Works()
        results = works.query(query).sort('relevance').limit(max_results)
        papers = []
        
        for work in results:
            if work.get('title') and work.get('author'):
                paper_info = {
                    'title': work['title'][0],
                    'authors': [author.get('given', '') + ' ' + author.get('family', '') for author in work['author']],
                    'year': work.get('published-print', {}).get('date-parts', [['']])[0][0],
                    'journal': work.get('container-title', [''])[0],
                    'doi': work.get('DOI', ''),
                    'source': 'Crossref'
                }
                papers.append(paper_info)
        return papers
    except Exception as e:
        print(f"Crossref search error: {str(e)}")
        return []

def search_semantic_scholar(query: str, max_results: int = 5) -> List[Dict]:
    """使用Semantic Scholar API搜索文献"""
    try:
        sch.api_key = None  # 使用免费API
        results = sch.search_paper(query, limit=max_results)
        papers = []
        
        for paper in results:
            paper_info = {
                'title': paper.title,
                'authors': [author.name for author in paper.authors],
                'year': paper.year,
                'journal': paper.journal.name if paper.journal else '',
                'doi': paper.doi,
                'source': 'Semantic Scholar'
            }
            papers.append(paper_info)
        return papers
    except Exception as e:
        print(f"Semantic Scholar search error: {str(e)}")
        return []

def search_google_scholar(query: str, max_results: int = 5) -> List[Dict]:
    """使用Google Scholar API搜索文献"""
    try:
        search_params = {
            "engine": "google_scholar",
            "q": query,
            "api_key": SERPAPI_API_KEY,
            "num": max_results
        }
        
        if PROXY_URL:
            search_params["proxy"] = PROXY_URL
        
        search = GoogleSearch(search_params)
        results = search.get_dict()
        papers = []
        
        if 'organic_results' in results:
            for result in results['organic_results']:
                paper_info = {
                    'title': result.get('title', ''),
                    'authors': [author.strip() for author in result.get('authors', '').split(',')],
                    'year': result.get('year', ''),
                    'journal': result.get('publication', ''),
                    'source': 'Google Scholar'
                }
                papers.append(paper_info)
        return papers
    except Exception as e:
        print(f"Google Scholar search error: {str(e)}")
        return []

def format_apa7_citation(paper: Dict) -> str:
    """将论文信息转换为APA第7版格式"""
    authors = paper.get('authors', [])
    if len(authors) > 1:
        author_text = f"{', '.join(authors[:-1])}, & {authors[-1]}"
    else:
        author_text = authors[0] if authors else "Unknown"
    
    year = paper.get('year', 'n.d.')
    title = paper.get('title', '')
    journal = paper.get('journal', '')
    doi = paper.get('doi', '')
    source = paper.get('source', '')
    
    citation = f"{author_text}. ({year}). {title}. "
    
    if journal:
        citation += f"{journal}. "
    if doi:
        citation += f"https://doi.org/{doi}"
    
    citation += f" [{source}]"
    
    return citation

def search_all_sources(query: str) -> Dict[str, List[Dict]]:
    """从所有来源搜索文献"""
    results = {
        'crossref': search_crossref(query),
        'semantic_scholar': search_semantic_scholar(query),
        'google_scholar': search_google_scholar(query)
    }
    
    # 为每个结果添加引用格式
    for source, papers in results.items():
        for paper in papers:
            paper['citation'] = format_apa7_citation(paper)
    
    return results

@app.route('/api/generate-paper', methods=['POST'])
def generate_paper():
    try:
        data = request.json
        topic = data.get('text', '')
        
        if not topic:
            return jsonify({'success': False, 'error': '请输入论文主题'}), 400
        
        # 从所有来源搜索文献
        all_results = search_all_sources(topic)
        
        # 检查是否找到任何文献
        total_results = sum(len(papers) for papers in all_results.values())
        if total_results == 0:
            return jsonify({'success': False, 'error': '未找到相关文献'}), 400
        
        # 准备用于生成论文的引用
        all_citations = []
        for source_papers in all_results.values():
            all_citations.extend([paper['citation'] for paper in source_papers])
        
        # 生成论文内容
        prompt = f"""作为一个学术论文写作助手，请根据主题"{topic}"生成一篇学术论文的内容。
要求：
1. 包含引言、主要内容（2-3个部分）和结论
2. 每个段落都需要引用参考文献
3. 使用学术性的语言
4. 确保引用的合理性和准确性
5. 分别使用来自不同数据源的文献

可用的参考文献：
{chr(10).join(f"{i+1}. {citation}" for i, citation in enumerate(all_citations))}

请生成论文内容，并在每次引用时使用(作者, 年份)的格式。"""

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "你是一个专业的学术论文写作助手，擅长生成具有严谨学术性的内容。"},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=2000
        )
        
        generated_content = response.choices[0].message.content
        
        return jsonify({
            'success': True,
            'paper': generated_content,
            'references': all_citations,
            'search_results': {
                source: [{'title': p['title'], 'citation': p['citation']} for p in papers]
                for source, papers in all_results.items()
            }
        })
        
    except Exception as e:
        print(f"API error: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    return jsonify({'status': 'ok', 'timestamp': datetime.now().isoformat()})

if __name__ == '__main__':
    app.run(debug=True) 